#include <iostream>
#include <climits>
using namespace std;

// Define the structure for an edge
struct Edge {
    int u, v, weight;  // u and v are vertices, weight is the edge weight
    Edge() : u(0), v(0), weight(0) {}
    Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}
};

// Bellman-Ford algorithm to find the shortest path from a source vertex
void bellmanFord(int n, int m, Edge* edges, int src) {
    // Initialize distance array with a large number
    int* dist = new int[n];
    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;
    }
    dist[src] = 0;

    // Relax edges repeatedly (n-1) times
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int weight = edges[j].weight;

            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Check for negative weight cycles
    for (int i = 0; i < m; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int weight = edges[i].weight;

        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains negative weight cycle" << endl;
            delete[] dist;
            return;
        }
    }

    // Print the shortest distances from the source
    cout << "Vertex Distance from Source (" << src << "):" << endl;
    for (int i = 0; i < n; i++) {
        if (dist[i] == INT_MAX) {
            cout << i << " : INF" << endl;
        } else {
            cout << i << " : " << dist[i] << endl;
        }
    }

    // Clean up dynamically allocated memory
    delete[] dist;
}

int main() {
    // Number of vertices (n) and edges (m)
    int n = 5; // 5 vertices
    int m = 8; // 8 edges

    // Dynamically allocate memory for edges
    Edge* edges = new Edge[m];

    // List of edges (u, v, weight)
    edges[0] = Edge(0, 1, -1);
    edges[1] = Edge(0, 2, 4);
    edges[2] = Edge(1, 2, 3);
    edges[3] = Edge(1, 3, 2);
    edges[4] = Edge(1, 4, 2);
    edges[5] = Edge(3, 2, 5);
    edges[6] = Edge(3, 1, 1);
    edges[7] = Edge(4, 3, -3);

    // Run Bellman-Ford algorithm from source vertex 0
    bellmanFord(n, m, edges, 0);

    // Clean up dynamically allocated memory
    delete[] edges;

    return 0;
}
