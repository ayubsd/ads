#include <iostream>
#include <algorithm>
using namespace std;

// Define the structure for an edge
struct Edge {
    int u, v, weight; // u and v are the vertices, weight is the edge weight
    Edge() : u(0), v(0), weight(0) {}
    Edge(int u, int v, int weight) : u(u), v(v), weight(weight) {}
};

// Disjoint Set Union (DSU) / Union-Find data structure
class DSU {
public:
    int* parent;
    int* rank;
    int n;

    DSU(int n) {
        this->n = n;
        parent = new int[n];
        rank = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = i;  // Initially, every node is its own parent
            rank[i] = 0;    // Initially, every node has rank 0
        }
    }

    ~DSU() {
        delete[] parent;
        delete[] rank;
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            // Union by rank: attach the smaller tree under the larger tree
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

// Function to implement Kruskal's algorithm to find MST
void kruskalMST(int n, int m, Edge* edges) {
    // Step 1: Sort edges by weight
    sort(edges, edges + m, [](Edge& a, Edge& b) {
        return a.weight < b.weight;
    });

    // Step 2: Create a disjoint set
    DSU dsu(n);

    Edge* mst = new Edge[n - 1];  // To store the edges of the MST
    int mstWeight = 0;             // Total weight of MST
    int mstEdgeCount = 0;          // Number of edges in the MST

    // Step 3: Process edges and add to MST if no cycle
    for (int i = 0; i < m; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int weight = edges[i].weight;

        if (dsu.find(u) != dsu.find(v)) {
            // No cycle, include this edge in MST
            dsu.unite(u, v);
            mst[mstEdgeCount++] = edges[i];
            mstWeight += weight;

            if (mstEdgeCount == n - 1) {
                break;  // MST contains n-1 edges, so we can stop
            }
        }
    }

    // Output the MST and its total weight
    cout << "Edges in MST:\n";
    for (int i = 0; i < mstEdgeCount; i++) {
        cout << mst[i].u << " - " << mst[i].v << " : " << mst[i].weight << endl;
    }
    cout << "Total weight of MST: " << mstWeight << endl;

    // Clean up dynamically allocated memory
    delete[] mst;
}

int main() {
    // Number of vertices (n) and edges (m)
    int n = 6; // 6 vertices
    int m = 9; // 9 edges

    // Dynamically allocate memory for edges
    Edge* edges = new Edge[m];
    
    // List of edges (u, v, weight)
    edges[0] = Edge(0, 1, 4);
    edges[1] = Edge(0, 2, 4);
    edges[2] = Edge(1, 2, 2);
    edges[3] = Edge(1, 3, 5);
    edges[4] = Edge(2, 3, 3);
    edges[5] = Edge(2, 4, 6);
    edges[6] = Edge(3, 4, 1);
    edges[7] = Edge(3, 5, 2);
    edges[8] = Edge(4, 5, 4);

    // Find MST using Kruskal's algorithm
    kruskalMST(n, m, edges);

    // Clean up dynamically allocated memory
    delete[] edges;

    return 0;
}
